<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  version="2.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
  xmlns:dts="http://davidtsadler.com/"
  exclude-result-prefixes="xs">

<xsl:output method="text" encoding="UTF-8"/>

<xsl:include href="classes_doc.xsl"/>
<xsl:include href="operations_doc.xsl"/>

<xsl:param name="service" required="yes" as="xs:string"/>
<xsl:param name="destDirectory" required="yes" as="xs:string"/>

<xsl:template match="/">
  <xsl:variable name="classes" as="element()+">
    <xsl:apply-templates select="/wsdl:definitions/wsdl:types/xs:schema/*:complexType" mode="classes-doc"/>
    <xsl:apply-templates select="/wsdl:definitions/wsdl:types/xs:schema/*:complexType/*:complexContent/*:extension/*:sequence/*:element/*:complexType" mode="classes-doc"/>
    <xsl:apply-templates select="/xs:schema/*:complexType" mode="classes-doc"/>
    <xsl:apply-templates select="/xs:schema/*:complexType/*:complexContent/*:extension/*:sequence/*:element/*:complexType" mode="classes-doc"/>
  </xsl:variable>
  <xsl:variable name="enums" as="element()*">
    <xsl:apply-templates select="/wsdl:definitions/wsdl:types/xs:schema/*:simpleType[*:restriction]" mode="classes-doc"/>
    <xsl:apply-templates select="/xs:schema/*:simpleType[*:restriction]" mode="classes-doc"/>
  </xsl:variable>
  <xsl:apply-templates select="$classes" mode="php"/>
  <xsl:apply-templates select="$classes" mode="phpunit"/>
  <xsl:apply-templates select="$enums[enum]" mode="php"/>
  <xsl:apply-templates select="$enums[enum]" mode="phpunit"/>
  <!--
    Some APIs are defined by a XSD and don't have operations.
  -->
  <xsl:if test="/wsdl:definitions/wsdl:portType/wsdl:operation">
    <xsl:apply-templates select="." mode="php"/>
  </xsl:if>
</xsl:template>

<xsl:template match="class" mode="php">
  <xsl:result-document href="{$destDirectory}/src/{$service}/Types/{@className}.php">&lt;?php
/**
 * The contents of this file was generated using the WSDLs as provided by eBay.
 *
 * DO NOT EDIT THIS FILE!
 */

namespace DTS\eBaySDK\<xsl:copy-of select="$service"/>\Types;
<xsl:if test="@restResponse = 'true'">
use DTS\eBaySDK\StatusCodeTrait;
use DTS\eBaySDK\HttpHeadersTrait;
</xsl:if>
/**
 *<xsl:apply-templates select="property" mode="property-list"/>
 */
class <xsl:value-of select="@className"/><xsl:apply-templates select="." mode="extends"/>
{<xsl:if test="@restResponse = 'true'"><xsl:text>
    use StatusCodeTrait;
    use HttpHeadersTrait;
</xsl:text>
</xsl:if>
    /**
     * @var array Properties belonging to objects of this class.
     */
    private static $propertyTypes = [<xsl:apply-templates select="property" mode="property-info"/>
    ];

    /**
     * @param array $values Optional properties and values to assign to the object.<xsl:if test="@restResponse = 'true'"><xsl:text>
     * @param int $statusCode Status code
     * @param array $headers HTTP Response headers.</xsl:text></xsl:if>
     */
    public function __construct(array $values = []<xsl:if test="@restResponse = 'true'"><xsl:text>, $statusCode = 200, array $headers = []</xsl:text></xsl:if>)
    {
        list($parentValues, $childValues) = self::getParentValues(self::$propertyTypes, $values);

        parent::__construct($parentValues);

        if (!array_key_exists(__CLASS__, self::$properties)) {
            self::$properties[__CLASS__] = array_merge(self::$properties[get_parent_class()], self::$propertyTypes);
        }

        $this->setValues(__CLASS__, $childValues);<xsl:if test="@restResponse = 'true'"><xsl:text>

        $this->statusCode = (int)$statusCode;

        $this->setHeaders($headers);</xsl:text></xsl:if>
    }
}
</xsl:result-document>
</xsl:template>

<xsl:template match="class" mode="phpunit">
  <xsl:result-document href="{$destDirectory}/test/{$service}/Types/{@className}Test.php">&lt;?php
/**
 * The contents of this file was generated using the WSDLs as provided by eBay.
 *
 * DO NOT EDIT THIS FILE!
 */

namespace DTS\eBaySDK\Test\<xsl:copy-of select="$service"/>\Types;

use DTS\eBaySDK\<xsl:copy-of select="$service"/>\Types\<xsl:value-of select="@className"/>;

class <xsl:value-of select="@className"/>Test extends \PHPUnit_Framework_TestCase
{
    private $obj;

    protected function setUp()
    {
        $this->obj = new <xsl:value-of select="@className"/>();
    }

    public function testCanBeCreated()
    {
        $this->assertInstanceOf('\DTS\eBaySDK\<xsl:copy-of select="$service"/>\Types\<xsl:value-of select="@className"/>', $this->obj);
    }

    public function testExtends<xsl:value-of select="if (@extends != '') then @extends else 'BaseType'"/>()
    {
        $this->assertInstanceOf('<xsl:copy-of select="dts:phpns_extends(@extends)"/>', $this->obj);
    }
}
</xsl:result-document>
</xsl:template>

<xsl:template match="enum" mode="php">
  <xsl:result-document href="{$destDirectory}/src/{$service}/Enums/{@className}.php">&lt;?php
/**
 * The contents of this file was generated using the WSDLs as provided by eBay.
 *
 * DO NOT EDIT THIS FILE!
 */

namespace DTS\eBaySDK\<xsl:copy-of select="$service"/>\Enums;

/**
 *
 */
class <xsl:value-of select="@className"/>
{<xsl:apply-templates select="enum" mode="class-constants">
  <xsl:sort select="@const"/>
</xsl:apply-templates>
}
</xsl:result-document>
</xsl:template>

<xsl:template match="enum" mode="phpunit">
  <xsl:result-document href="{$destDirectory}/test/{$service}/Enums/{@className}Test.php">&lt;?php
/**
 * The contents of this file was generated using the WSDLs as provided by eBay.
 *
 * DO NOT EDIT THIS FILE!
 */

namespace DTS\eBaySDK\Test\<xsl:copy-of select="$service"/>\Enums;

use DTS\eBaySDK\<xsl:copy-of select="$service"/>\Enums\<xsl:value-of select="@className"/>;

class <xsl:value-of select="@className"/>Test extends \PHPUnit_Framework_TestCase
{
    private $obj;

    protected function setUp()
    {
        $this->obj = new <xsl:value-of select="@className"/>();
    }

    public function testCanBeCreated()
    {
        $this->assertInstanceOf('\DTS\eBaySDK\<xsl:copy-of select="$service"/>\Enums\<xsl:value-of select="@className"/>', $this->obj);
    }
}
</xsl:result-document>
</xsl:template>

<xsl:template match="class" mode="extends"> extends <xsl:copy-of select="dts:phpns_extends(@extends)"/>
</xsl:template>

<xsl:template match="property" mode="property-list">
 * @property <xsl:value-of select="@property-type"/><xsl:value-of select="if (@repeatable = 'true') then '[] ' else ' '"/>$<xsl:value-of select="@name"/>
</xsl:template>

<xsl:template match="property" mode="property-info">
        '<xsl:value-of select="@name"/>' => [
            'type' => '<xsl:value-of select="@actual-type"/>',
            'repeatable' => <xsl:value-of select="@repeatable"/>,
            'attribute' => <xsl:value-of select="@is-attribute"/>,
            '<xsl:value-of select="if (@is-attribute != 'false') then 'attributeName' else 'elementName'"/>' => '<xsl:value-of select="@actual-name"/>'
<xsl:choose>
    <xsl:when test="position()=last()">
      <xsl:text>        ]</xsl:text>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>        ],</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="enum" mode="class-constants">
    const C_<xsl:value-of select="@const"/> = '<xsl:value-of select="@value"/>';</xsl:template>

<xsl:template match="/" mode="php">
  <xsl:variable name="operations" as="element()*">
    <xsl:apply-templates select="/wsdl:definitions/wsdl:portType/wsdl:operation" mode="operations-doc"/>
  </xsl:variable>
  <xsl:variable name="operationDefs" as="element()*">
    <xsl:apply-templates select="/wsdl:definitions/wsdl:portType/wsdl:operation" mode="operation-defs"/>
  </xsl:variable>
  <xsl:variable name="apiVersion">
    <xsl:value-of select=".//*:Version|.//*:version"/>
  </xsl:variable>
  <xsl:result-document href="{$destDirectory}/src/{$service}/Services/{$service}Service.php">&lt;?php
/**
 * The contents of this file was generated using the WSDLs as provided by eBay.
 *
 * DO NOT EDIT THIS FILE!
 */

namespace DTS\eBaySDK\<xsl:copy-of select="$service"/>\Services;

class <xsl:copy-of select="$service"/>Service extends \DTS\eBaySDK\<xsl:copy-of select="$service"/>\Services\<xsl:copy-of select="$service"/>BaseService
{
    const API_VERSION = '<xsl:copy-of select="$apiVersion"/>';

    /**
     * @property array $operations Associative array of operations provided by the service.
     */
    protected static $operations = [<xsl:apply-templates select="$operationDefs" mode="php"/>
    ];

    /**
     * @param array $config Configuration option values.
     */
    public function __construct(array $config = [])
    {
        parent::__construct($config);
    }<xsl:apply-templates select="$operations" mode="php"/>
}
</xsl:result-document>
</xsl:template>

<xsl:template match="operation" mode="php">

    /**
     * @param \DTS\eBaySDK\<xsl:copy-of select="$service"/>\Types\<xsl:value-of select="@request-type"/> $request
     * @return \DTS\eBaySDK\<xsl:copy-of select="$service"/>\Types\<xsl:value-of select="@response-type"/>
     */
    public function <xsl:value-of select="@method-name"/>(\DTS\eBaySDK\<xsl:copy-of select="$service"/>\Types\<xsl:value-of select="@request-type"/> $request)
    {
        return $this-><xsl:value-of select="@method-name"/>Async($request)->wait();
    }

    /**
     * @param \DTS\eBaySDK\<xsl:copy-of select="$service"/>\Types\<xsl:value-of select="@request-type"/> $request
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function <xsl:value-of select="@method-name"/>Async(\DTS\eBaySDK\<xsl:copy-of select="$service"/>\Types\<xsl:value-of select="@request-type"/> $request)
    {
        return $this->callOperationAsync('<xsl:value-of select="@name"/>', $request);
    }</xsl:template>

<xsl:template match="operationDef" mode="php">
        '<xsl:value-of select="@name"/>' => [
            'method' => '<xsl:value-of select="@http-method"/>',
            'resource' => '<xsl:value-of select="@resource"/>',
            'responseClass' => '\DTS\eBaySDK\<xsl:copy-of select="$service"/>\Types\<xsl:value-of select="@response-type"/>',
            'params' => [<xsl:apply-templates select="operationParam" mode="php"/>
            ]
<xsl:choose>
    <xsl:when test="position()=last()">
      <xsl:text>        ]</xsl:text>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>        ],</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="operationParam" mode="php">
                '<xsl:value-of select="@name"/>' => [
                    'valid' => ['<xsl:value-of select="@valid"/>']<xsl:if test="@required = 'true'"><xsl:text>,</xsl:text></xsl:if>
                <xsl:if test="@required = 'true'">
                  <xsl:text>
                    'required' => true</xsl:text>
                </xsl:if>
                <xsl:choose>
                  <xsl:when test="position()=last()">
                    <xsl:text>
                ]</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>
                ],</xsl:text>
                  </xsl:otherwise>
              </xsl:choose>
</xsl:template>

<xsl:template match="wsdl:operation" mode="operation-defs">
  <xsl:element name="operationDef">
    <xsl:attribute name="name"><xsl:copy-of select="@name"/></xsl:attribute>
    <xsl:attribute name="method-name"><xsl:copy-of select="concat(lower-case(substring(@name, 1, 1)), substring(@name, 2))"/></xsl:attribute>
    <xsl:attribute name="http-method"><xsl:copy-of select="@method"/></xsl:attribute>
    <xsl:attribute name="resource"><xsl:copy-of select="@resource"/></xsl:attribute>
    <xsl:attribute name="response-type">
      <xsl:apply-templates select="wsdl:output" mode="operation-defs"/>
    </xsl:attribute>
    <xsl:apply-templates select="wsdl:input" mode="operation-params"/>
  </xsl:element>
</xsl:template>

<xsl:template match="wsdl:output" mode="operation-defs">
  <xsl:variable name="local-name" select="substring-after(@message, ':')"/>
  <xsl:variable name="type" select="substring-after(//xs:element[@name=$local-name]/@type, ':')"/>
  <xsl:copy-of select="concat(upper-case(substring($type, 1, 1)), substring($type, 2))"/>
</xsl:template>

<xsl:template match="wsdl:input" mode="operation-params">
  <xsl:variable name="local-name" select="substring-after(@message, ':')"/>
  <xsl:variable name="type" select="substring-after(//xs:element[@name=$local-name]/@type, ':')"/>
  <xsl:variable name="request-type" select="concat(upper-case(substring($type, 1, 1)), substring($type, 2))"/>
  <xsl:apply-templates select="/wsdl:definitions/wsdl:types/xs:schema/*:complexType[@name=$type]//*:sequence/*:element" mode="operation-params"/>
</xsl:template>

<xsl:template match="*:element" mode="operation-params">
  <xsl:element name="operationParam">
    <xsl:attribute name="name"><xsl:copy-of select="@name"/></xsl:attribute>
    <xsl:attribute name="valid"><xsl:copy-of select="@valid"/></xsl:attribute>
    <xsl:attribute name="required"><xsl:copy-of select="@required = 'true'"/></xsl:attribute>
  </xsl:element>
</xsl:template>

<xsl:function name="dts:phpns_extends" as="xs:string">
  <xsl:param name="extends"/>
  <xsl:choose>
    <xsl:when test="$extends='Base64BinaryType' or
                    $extends='BooleanType' or
                    $extends='DecimalType' or
                    $extends='DoubleType' or
                    $extends='IntegerType' or
                    $extends='StringType' or
                    $extends='TokenType' or
                    $extends='URIType'">
      <xsl:sequence select="concat('\DTS\eBaySDK\Types\', $extends)"/>
    </xsl:when>
    <xsl:when test="$extends">
      <xsl:sequence select="concat('\DTS\eBaySDK\', $service, '\Types\', $extends)"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:text>\DTS\eBaySDK\Types\BaseType</xsl:text>
    </xsl:otherwise>
  </xsl:choose>
</xsl:function>
</xsl:stylesheet>
